name: Pipeline

on:
  push:
    branches: [ "master", "develop" ]
  pull_request:
    branches: [ "master", "develop" ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  ci:
    runs-on: ubuntu-latest
    environment: DEV
    steps:
      - uses: actions/checkout@v3

      - name: "‚öôÔ∏è Set up JDK 17"
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: "üõ† Run tests"
        run: mvn -B test

      - name: "‚úÖ Generate JaCoCo Badge"
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: "**/jacoco.csv"

      - name: "üìù Log coverage percentage"
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: "‚úîÔ∏è Commit the badge (if it changed)"
        run: |
          if [[ `git status --porcelain` ]]; then
          git config --global user.name 'michel-dos-santos'
          git config --global user.email 'michel-dos-santos@users.noreply.github.com'
          git add -A
          git commit -m "Autogenerated JaCoCo coverage badge"
          git push
          fi

      - name: "‚òëÔ∏è Code analisys"
        run: mvn clean install -e sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.projectKey=michel-dos-santos_lanchonete-do-bairro.pedidos -Dsonar.organization=lanchonete-do-bairro-postech-fiap

  cd:
    runs-on: ubuntu-latest
    environment: DEV
    needs: ci
    steps:
      - uses: actions/checkout@v3

      - name: "‚öôÔ∏è Set up JDK 17"
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: "‚åõ Extract branch name"
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: "üêã Docker login"
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
      - name: "üñºÔ∏è Build docker image adapter-rest-fast-food"
        run: |
          docker build . --file adapter-rest/Dockerfile --tag ${{ secrets.DOCKER_USER }}/adapter-rest-pedidos:latest

      - name: "üöÄ Docker push adapter-rest-fast-food"
        run: |
         docker push ${{ secrets.DOCKER_USER }}/adapter-rest-pedidos:latest

      - name: "‚öôÔ∏è Configure AWS credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_SECRET }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: "üõ† Update kube config"
        run: |
          aws eks update-kubeconfig --name lanchonete-do-bairro-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: "‚úÖ Checkout ymls infra"
        uses: actions/checkout@v3
        with:
          repository: michel-dos-santos/lanchonete-do-bairro.infra-k8s
          path: './infra'

#      - name: "üöÄ Deploy image to Amazon EKS"
#        run: |
#          kubectl delete secret dynamic-secrets \
#            --ignore-not-found \
#            && kubectl create secret generic dynamic-secrets \
#            --from-literal=AWS_ACCESS_KEY='${{ secrets.AWS_ACCESS_KEY }}' \
#            --from-literal=PROFILE='${{ secrets.PROFILE }}' \
#            --from-literal=AWS_ACCESS_SECRET='${{ secrets.AWS_ACCESS_SECRET }}' \
#            --from-literal=AWS_REGION='${{ secrets.AWS_REGION }}' \
#            --from-literal=AWS_COGNITO_CLIENT_ID='${{ secrets.AWS_COGNITO_CLIENT_ID }}' \
#            --from-literal=AWS_COGNITO_USER_POOL_ID='${{ secrets.AWS_COGNITO_USER_POOL_ID }}' \
#            --from-literal=DB_URL='${{ secrets.DB_URL }}' \
#            --from-literal=DB_USER='${{ secrets.DB_USER }}' \
#            --from-literal=DB_PASSWORD='${{ secrets.DB_PASSWORD }}' \
#            && kubectl apply -f ./infra/src/k8s --validate=false